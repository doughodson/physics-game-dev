appendix: Vector Operations
==================
//------------------------------------------------------------------------
// Vector Class and vector functions
//------------------------------------------------------------------------
class Vector {
public:
     float x;
     float y;
     float z;

     Vector(void);
     Vector(float xi, float yi, float zi);

     float Magnitude(void);
     void  Normalize(void);
     void  Reverse(void);

     Vector& operator+=(Vector u);
     Vector& operator-=(Vector u);
     Vector& operator*=(float s);
     Vector& operator/=(float s);

     Vector operator-(void);

};

// Constructor
inline Vector::Vector(void)
{
     x = 0;
     y = 0;
     z = 0;
}

// Constructor
inline Vector::Vector(float xi, float yi, float zi)
{
     x = xi;
     y = yi;
     z = zi;
}
    
    
====================================
inline     float Vector::Magnitude(void)
{
     return (float) sqrt(x*x + y*y + z*z);
}
    
    
====================================
inline     void  Vector::Normalize(void)
{
     float m = (float) sqrt(x*x + y*y + z*z);
     if(m <= tol) m = 1;
     x /= m;
     y /= m;
     z /= m;

     if (fabs(x) < tol) x = 0.0f;
     if (fabs(y) < tol) y = 0.0f;
     if (fabs(z) < tol) z = 0.0f;
}
    
    
====================================
float    const    tol = 0.0001f;
    
    
====================================
inline     void  Vector::Reverse(void)
{
     x = -x;
     y = -y;
     z = -z;
}
    
    
====================================
inline Vector& Vector::operator+=(Vector u)
{
     x += u.x;
     y += u.y;
     z += u.z;
     return *this;
}
    
    
====================================
inline     Vector& Vector::operator-=(Vector u)
{
     x -= u.x;
     y -= u.y;
     z -= u.z;
     return *this;
}
    
    
====================================
inline     Vector& Vector::operator*=(float s)
{
     x *= s;
     y *= s;
     z *= s;
     return *this;
}
    
    
====================================
inline     Vector& Vector::operator/=(float s)
{
     x /= s;
     y /= s;
     z /= s;
     return *this;
}
    
    
====================================
inline     Vector Vector::operator-(void)
{
     return Vector(-x, -y, -z);
}
    
    
====================================
inline     Vector operator+(Vector u, Vector v)
{
     return Vector(u.x + v.x, u.y + v.y, u.z + v.z);
}
    
    
====================================
inline     Vector operator-(Vector u, Vector v)
{
     return Vector(u.x - v.x, u.y - v.y, u.z - v.z);
}
    
    
====================================
inline     Vector operator^(Vector u, Vector v)
{
     return Vector(     u.y*v.z - u.z*v.y,
                         -u.x*v.z + u.z*v.x,
                         u.x*v.y - u.y*v.x );
}
    
    
====================================
// Vector dot product
inline     float operator*(Vector u, Vector v)
{
     return (u.x*v.x + u.y*v.y + u.z*v.z);
}
    
    
====================================
inline     Vector operator*(float s, Vector u)
{
     return Vector(u.x*s, u.y*s, u.z*s);
}


inline     Vector operator*(Vector u, float s)
{
     return Vector(u.x*s, u.y*s, u.z*s);
}
    
    
====================================
inline     Vector operator/(Vector u, float s)
{
     return Vector(u.x/s, u.y/s, u.z/s);
}
    
    
====================================
inline     float TripleScalarProduct(Vector u, Vector v, Vector w)
{
     return float(     (u.x * (v.y*w.z - v.z*w.y)) +
                         (u.y * (-v.x*w.z + v.z*w.x)) +
                         (u.z * (v.x*w.y - v.y*w.x)) );
}
    
    
==================