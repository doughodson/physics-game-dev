chapter: Implementing Collision Response
==================
RigidBody2D    Craft2;
    
    
====================================
bool    Initialize(void)
{
.
.
.
    Craft2.vPosition.x = _WINWIDTH/2;
    Craft2.vPosition.y = _WINHEIGHT/2;
    Craft2.fOrientation = 90;
.
.
.
}
    
    
====================================
    if(Craft2.vPosition.x > _WINWIDTH) Craft2.vPosition.x = 0;
    if(Craft2.vPosition.x < 0) Craft2.vPosition.x = _WINWIDTH;
    if(Craft2.vPosition.y > _WINHEIGHT) Craft2.vPosition.y = 0;
    if(Craft2.vPosition.y < 0) Craft2.vPosition.y = _WINHEIGHT;
    
    
====================================
int     CheckForCollision (pRigidBody2D body1, pRigidBody2D body2)
{
     Vector    d;
     float     r;
     int       retval = 0;
     float     s;
     Vector    v1, v2;
     float     Vrn;

     r = body1->ColRadius + body2->ColRadius;
     d = body1->vPosition - body2->vPosition;
     s = d.Magnitude() - r;

     d.Normalize();
     vCollisionNormal = d;

     v1 = body1->vVelocity;
     v2 = body2->vVelocity;
     vRelativeVelocity = v1 - v2;

     Vrn = vRelativeVelocity * vCollisionNormal;
     if((fabs(s) <= ctol) && (Vrn < 0.0))
     {
          retval = 1; // collision;
          CollisionBody1 = body1;
          CollisionBody2 = body2;
     } else      if(s < -ctol)
     {
          retval = −1; // interpenetrating
     } else
          retval = 0; // no collision

     return retval;
}
    
    
====================================
->ColRadius = SQRT(fLength*fLength + fWidth*fWidth);
    
    
====================================
void     ApplyImpulse(pRigidBody2D body1, pRigidBody2D body2)
{
     float j;


     j =  (-(1+fCr) * (vRelativeVelocity*vCollisionNormal)) /
          ( (vCollisionNormal*vCollisionNormal) *
            (1/body1->fMass + 1/body2->fMass) );

     body1->vVelocity += (j * vCollisionNormal) / body1->fMass;
     body2->vVelocity -= (j * vCollisionNormal) / body2->fMass;
}
    
    
====================================
void     UpdateSimulation(float dt)
{
     float     dtime = dt;
     bool      tryAgain = true;
     int       check=0;
     RigidBody2D     craft1Copy, craft2Copy;
     bool      didPen = false;
     int       count = 0;


    Craft.SetThrusters(false, false);

    if (IsKeyDown(VK_UP))
        Craft.ModulateThrust(true);

    if (IsKeyDown(VK_DOWN))
        Craft.ModulateThrust(false);

    if (IsKeyDown(VK_RIGHT))
        Craft.SetThrusters(true, false);

    if (IsKeyDown(VK_LEFT))
        Craft.SetThrusters(false, true);


     while(tryAgain && dtime > tol)
     {
          tryAgain = false;
          memcpy(&craft1Copy, &Craft, sizeof(RigidBody2D));
          memcpy(&craft2Copy, &Craft2, sizeof(RigidBody2D));

          Craft.UpdateBodyEuler(dtime);
          Craft2.UpdateBodyEuler(dtime);

          CollisionBody1 = 0;
          CollisionBody2 = 0;
          check = CheckForCollision(&craft1Copy, &craft2Copy);

          if(check == PENETRATING)
          {
               dtime = dtime/2;
               tryAgain = true;
               didPen = true;
          } else if(check == COLLISION)
          {
               if(CollisionBody1 != 0 && CollisionBody2 != 0)
                    ApplyImpulse(CollisionBody1,  CollisionBody2);
          }
     }

     if(!didPen)
     {
          memcpy(&Craft, &craft1Copy, sizeof(RigidBody2D));
          memcpy(&Craft2, &craft2Copy, sizeof(RigidBody2D));
     }
}
    
    
====================================
     while(tryAgain && dtime > tol)
     {
         .
         .
         .
     }
    
    
====================================
     if(CollisionBody1 != 0 && CollisionBody2 != 0)
          ApplyImpulse(CollisionBody1,  CollisionBody2);
    
    
====================================
#define     LINEARDRAGCOEFFICIENT        0.25f
#define     COEFFICIENTOFRESTITUTION     0.5f
#define     COLLISIONTOLERANCE           2.0f

Vector      vCollisionNormal;
Vector      vRelativeVelocity;
float       fCr = COEFFICIENTOFRESTITUTION;
float const ctol = COLLISIONTOLERANCE;
    
    
====================================
int     CheckForCollision(pRigidBody2D body1, pRigidBody2D body2)
{
     Vector    d;
     float     r;
     int       retval = 0;
     float     s;
     Vector    vList1[4], vList2[4];
     float     wd, lg;
     int       i,j;
     bool      haveNodeNode = false;
     bool      interpenetrating = false;
     bool      haveNodeEdge = false;
     Vector    v1, v2, u;
     Vector    edge, p, proj;
     float     dist, dot;
     float     Vrn;

     // First check to see if the bounding circles are colliding
     r = body1->fLength/2 + body2->fLength/2;
     d = body1->vPosition - body2->vPosition;
     s = d.Magnitude() - r;

     if(s <= ctol)
     {   // We have a possible collision, check further
          // build vertex lists for each hovercraft
          wd = body1->fWidth;
          lg = body1->fLength;
          vList1[0].y = wd/2;          vList1[0].x = lg/2;
          vList1[1].y = -wd/2;         vList1[1].x = lg/2;
          vList1[2].y = -wd/2;         vList1[2].x = -lg/2;
          vList1[3].y = wd/2;          vList1[3].x = -lg/2;

          for(i=0; i<4; i++)
          {
               VRotate2D(body1->fOrientation, vList1[i]);
               vList1[i] = vList1[i] + body1->vPosition;
          }

          wd = body2->fWidth;
          lg = body2->fLength;
          vList2[0].y = wd/2;          vList2[0].x = lg/2;
          vList2[1].y = -wd/2;         vList2[1].x = lg/2;
          vList2[2].y = -wd/2;         vList2[2].x = -lg/2;
          vList2[3].y = wd/2;          vList2[3].x = -lg/2;

          for(i=0; i<4; i++)
          {
               VRotate2D(body2->fOrientation, vList2[i]);
               vList2[i] = vList2[i] + body2->vPosition;
          }

          // Check for vertex-vertex collision
          for(i=0; i<4 && !haveNodeNode; i++)
          {
               for(j=0; j<4 && !haveNodeNode; j++)
               {

                    vCollisionPoint = vList1[i];
                    body1->vCollisionPoint = vCollisionPoint −
                                             body1->vPosition;

                    body2->vCollisionPoint = vCollisionPoint −
                                             body2->vPosition;

                    vCollisionNormal = body1->vPosition −
                                       body2->vPosition;

                    vCollisionNormal.Normalize();

                    v1 = body1->vVelocityBody +
                        (body1->vAngularVelocity^body1->vCollisionPoint);

                    v2 = body2->vVelocityBody +
                        (body2->vAngularVelocity^body2->vCollisionPoint);

                    v1 = VRotate2D(body1->fOrientation, v1);
                    v2 = VRotate2D(body2->fOrientation, v2);

                    vRelativeVelocity = v1 - v2;
                    Vrn = vRelativeVelocity * vCollisionNormal;

                    if( ArePointsEqual(vList1[i],
                                       vList2[j]) &&
                        (Vrn < 0.0) )
                         haveNodeNode = true;

               }
          }

          // Check for vertex-edge collision
          if(!haveNodeNode)
          {
               for(i=0; i<4 && !haveNodeEdge; i++)
               {
                    for(j=0; j<3 && !haveNodeEdge; j++)
                    {
                         if(j==2)
                              edge = vList2[0] - vList2[j];
                         else
                              edge = vList2[j+1] - vList2[j];
                         u = edge;
                         u.Normalize();

                         p = vList1[i] - vList2[j];
                         proj = (p * u) * u;

                         d = p^u;
                         dist = d.Magnitude();

                         vCollisionPoint = vList1[i];
                         body1->vCollisionPoint = vCollisionPoint −
                                                  body1->vPosition;

                         body2->vCollisionPoint = vCollisionPoint −
                                                  body2->vPosition;

                         vCollisionNormal = ((u^p)^u);
                         vCollisionNormal.Normalize();

                         v1 = body1->vVelocityBody +
                             (body1->vAngularVelocity ^
                              body1->vCollisionPoint);

                         v2 = body2->vVelocityBody +
                             (body2->vAngularVelocity ^
                              body2->vCollisionPoint);

                         v1 = VRotate2D(body1->fOrientation, v1);
                         v2 = VRotate2D(body2->fOrientation, v2);

                         vRelativeVelocity = (v1 - v2);
                         Vrn = vRelativeVelocity * vCollisionNormal;

                         if( (proj.Magnitude() > 0.0f) &&
                             (proj.Magnitude() <= edge.Magnitude()) &&
                             (dist <= ctol) &&
                             (Vrn < 0.0) )
                              haveNodeEdge = true;
                    }
               }
          }

          // Check for penetration
          if(!haveNodeNode && !haveNodeEdge)
          {
               for(i=0; i<4 && !interpenetrating; i++)
               {
                    for(j=0; j<4 && !interpenetrating; j++)
                    {
                         if(j==3)
                              edge = vList2[0] - vList2[j];
                         else
                              edge = vList2[j+1] - vList2[j];

                         p = vList1[i] - vList2[j];
                         dot = p * edge;
                         if(dot < 0)
                         {
                              interpenetrating = true;
                         }
                    }
               }
       }

       if(interpenetrating)
       {
               retval = −1;
       } else if(haveNodeNode || haveNodeEdge)
       {
               retval = 1;
       } else
               retval = 0;

     } else
     {
          retval = 0;
     }

     return retval;
}
    
    
====================================
     r = body1->fLength/2 + body2->fLength/2;
     d = body1->vPosition - body2->vPosition;
     s = d.Magnitude() - r;

     if(s <= ctol)
     {
          .
          .
          .
     } else
          retval = 0;
     }
    
    
====================================
          wd = body1->fWidth;
          lg = body1->fLength;
          vList1[0].y = wd/2;          vList1[0].x = lg/2;
          vList1[1].y = -wd/2;         vList1[1].x = lg/2;
          vList1[2].y = -wd/2;         vList1[2].x = -lg/2;
          vList1[3].y = wd/2;          vList1[3].x = -lg/2;

          for(i=0; i<4; i++)
          {
               VRotate2D(body1->fOrientation, vList1[i]);
               vList1[i] = vList1[i] + body1->vPosition;
          }

          wd = body2->fWidth;
          lg = body2->fLength;
          vList2[0].y = wd/2;          vList2[0].x = lg/2;
          vList2[1].y = -wd/2;         vList2[1].x = lg/2;
          vList2[2].y = -wd/2;         vList2[2].x = -lg/2;
          vList2[3].y = wd/2;          vList2[3].x = -lg/2;
          for(i=0; i<4; i++)
          {
               VRotate2D(body2->fOrientation, vList2[i]);
               vList2[i] = vList2[i] + body2->vPosition;
          }
    
    
====================================
          // Check for vertex-vertex collision
          for(i=0; i<4 && !haveNodeNode; i++)
          {
               for(j=0; j<4 && !haveNodeNode; j++)
               {

                    vCollisionPoint = vList1[i];
                    body1->vCollisionPoint = vCollisionPoint −
                                             body1->vPosition;

                    body2->vCollisionPoint = vCollisionPoint −
                                             body2->vPosition;

                    vCollisionNormal = body1->vPosition −
                                       body2->vPosition;

                    vCollisionNormal.Normalize();

                    v1 = body1->vVelocityBody +
                        (body1->vAngularVelocity^body1->vCollisionPoint);

                    v2 = body2->vVelocityBody +
                        (body2->vAngularVelocity^body2->vCollisionPoint);

                    v1 = VRotate2D(body1->fOrientation, v1);
                    v2 = VRotate2D(body2->fOrientation, v2);

                    vRelativeVelocity = v1 - v2;
                    Vrn = vRelativeVelocity * vCollisionNormal;

                    if( ArePointsEqual(vList1[i],
                                       vList2[j]) &&
                                       (Vrn < 0.0) )
                         haveNodeNode = true;

               }
          }
    
    
====================================
                    if( ArePointsEqual(vList1[i],
                                       vList2[j]) &&
                                       (Vrn < 0.0) )
                         haveNodeNode = true;
    
    
====================================
bool     ArePointsEqual(Vector p1, Vector p2)
{
     // Points are equal if each component is within ctol of each other
     if(  (fabs(p1.x - p2.x) <= ctol) &&
          (fabs(p1.y - p2.y) <= ctol) &&
          (fabs(p1.z - p2.z) <= ctol) )
          return true;
     else
          return false;
}
    
    
====================================
                    vCollisionPoint = vList1[i];
                    body1->vCollisionPoint = vCollisionPoint −
                                             body1->vPosition;

                    body2->vCollisionPoint = vCollisionPoint −
                                             body2->vPosition;
    
    
====================================
                    vCollisionNormal = body1->vPosition −
                                       body2->vPosition;

                    vCollisionNormal.Normalize();
    
    
====================================
                    v1 = body1->vVelocityBody +
                        (body1->vAngularVelocity^body1->vCollisionPoint);

                    v2 = body2->vVelocityBody +
                        (body2->vAngularVelocity^body2->vCollisionPoint);

                    v1 = VRotate2D(body1->fOrientation, v1);
                    v2 = VRotate2D(body2->fOrientation, v2);

                    vRelativeVelocity = v1 - v2;
                    Vrn = vRelativeVelocity * vCollisionNormal;
    
    
====================================
          // Check for vertex-edge collision
          if(!haveNodeNode)
          {
               for(i=0; i<4 && !haveNodeEdge; i++)
               {
                    for(j=0; j<3 && !haveNodeEdge; j++)
                    {
                         if(j==3)
                              edge = vList2[0] - vList2[j];
                         else
                              edge = vList2[j+1] - vList2[j];
                         u = edge;
                         u.Normalize();

                         p = vList1[i] - vList2[j];
                         proj = (p * u) * u;

                         d = p^u;
                         dist = d.Magnitude();

                         vCollisionPoint = vList1[i];
                         body1->vCollisionPoint = vCollisionPoint −
                                                  body1->vPosition;

                         body2->vCollisionPoint = vCollisionPoint −
                                                  body2->vPosition;

                         vCollisionNormal = ((u^p)^u);
                         vCollisionNormal.Normalize();

                         v1 = body1->vVelocityBody +
                             (body1->vAngularVelocity ^
                              body1->vCollisionPoint);

                         v2 = body2->vVelocityBody +
                             (body2->vAngularVelocity ^
                              body2->vCollisionPoint);

                         v1 = VRotate2D(body1->fOrientation, v1);
                         v2 = VRotate2D(body2->fOrientation, v2);

                         vRelativeVelocity = (v1 - v2);
                         Vrn = vRelativeVelocity * vCollisionNormal;

                         if( (proj.Magnitude() > 0.0f) &&
                             (proj.Magnitude() <= edge.Magnitude()) &&
                             (dist <= ctol) &&
                             (Vrn < 0.0) )
                              haveNodeEdge = true;
                    }
               }
          }
    
    
====================================
                         if(j==3)
                              edge = vList2[0] - vList2[j];
                         else
                              edge = vList2[j+1] - vList2[j];
                         u = edge;
                         u.Normalize();
    
    
====================================
                         p = vList1[i] - vList2[j];
                         proj = (p * u) * u;

                         d = p^u;
                         dist = d.Magnitude();
    
    
====================================
                         vCollisionPoint = vList1[i];
                         body1->vCollisionPoint = vCollisionPoint −
                                                  body1->vPosition;

                         body2->vCollisionPoint = vCollisionPoint −
                                                  body2->vPosition;
    
    
====================================
                         vCollisionNormal = ((u^p)^u);
                         vCollisionNormal.Normalize();
    
    
====================================
                         v1 = body1->vVelocityBody +
                             (body1->vAngularVelocity ^
                              body1->vCollisionPoint);

                         v2 = body2->vVelocityBody +
                             (body2->vAngularVelocity ^
                              body2->vCollisionPoint);

                         v1 = VRotate2D(body1->fOrientation, v1);
                         v2 = VRotate2D(body2->fOrientation, v2);

                         vRelativeVelocity = (v1 - v2);
                         Vrn = vRelativeVelocity * vCollisionNormal;
    
    
====================================
                         if( (proj.Magnitude() > 0.0f) &&
                             (proj.Magnitude() <= edge.Magnitude()) &&
                             (dist <= ctol) &&
                             (Vrn < 0.0) )
                              haveNodeEdge = true;
    
    
====================================
          if(!haveNodeNode && !haveNodeEdge)
          {
               for(i=0; i<4 && !interpenetrating; i++)
               {
                    for(j=0; j<4 && !interpenetrating; j++)
                    {
                         if(j==3)
                              edge = vList2[0] - vList2[j];
                         else
                              edge = vList2[j+1] - vList2[j];

                         p = vList1[i] - vList2[j];
                         dot = p * edge;
                         if(dot < 0)
                         {
                              interpenetrating = true;
                         }
                    }
               }
       }
    
    
====================================
void     ApplyImpulse(pRigidBody2D body1, pRigidBody2D body2)
{
     float j;

     j = (-(1+fCr) * (vRelativeVelocity*vCollisionNormal)) /
          ( (1/body1->fMass + 1/body2->fMass) +
          (vCollisionNormal * (((body1->vCollisionPoint ^
           vCollisionNormal)/body1->fInertia)^body1->vCollisionPoint)) +
          (vCollisionNormal * (((body2->vCollisionPoint ^
           vCollisionNormal)/body2->fInertia)^body2->vCollisionPoint))
          );

     body1->vVelocity += (j * vCollisionNormal) / body1->fMass;
     body1->vAngularVelocity += (body1->vCollisionPoint ^
                                 (j * vCollisionNormal)) /
                                 body1->fInertia;

     body2->vVelocity -= (j * vCollisionNormal) / body2->fMass;
     body2->vAngularVelocity -= (body2->vCollisionPoint ^
                                 (j * vCollisionNormal)) /
                                 body2->fInertia;
}
    
    
==================