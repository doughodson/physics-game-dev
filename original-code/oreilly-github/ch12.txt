chapter: 3D Rigid-Body Simulator
==================
typedef struct _RigidBody {

     float         fMass;           // total mass
     Matrix3x3     mInertia;        // mass moment of inertia
                                    // in body coordinates

     Matrix3x3     mInertiaInverse; // inverse of mass moment of inertia
     Vector        vPosition;       // position in earth coordinates
     Vector        vVelocity;       // velocity in earth coordinates
     Vector        vVelocityBody;   // velocity in body coordinates
     Vector        vAngularVelocity;// angular velocity in body coordinates
     Vector        vEulerAngles;    // Euler angles in body coordinates
     float         fSpeed;          // speed (magnitude of the velocity)
     Quaternion    qOrientation;    // orientation in earth coordinates
     Vector        vForces;         // total force on body
     Vector        vMoments;        // total moment (torque) on body
} RigidBody, *pRigidBody;
    
    
====================================
RigidBody    Airplane;    // global variable representing the airplane
.
.
.

void     InitializeAirplane(void)
{
     float iRoll, iPitch, iYaw;

     // Set initial position
     Airplane.vPosition.x = −5000.0f;
     Airplane.vPosition.y = 0.0f;
     Airplane.vPosition.z = 2000.0f;

     // Set initial velocity
     Airplane.vVelocity.x = 60.0f;
     Airplane.vVelocity.y = 0.0f;
     Airplane.vVelocity.z = 0.0f;
     Airplane.fSpeed = 60.0f;

     // Set initial angular velocity
     Airplane.vAngularVelocity.x = 0.0f;
     Airplane.vAngularVelocity.y = 0.0f;
     Airplane.vAngularVelocity.z = 0.0f;

     // Set the initial thrust, forces, and moments
     Airplane.vForces.x = 500.0f;
     Airplane.vForces.y = 0.0f;
     Airplane.vForces.z = 0.0f;
     ThrustForce = 500.0;

     Airplane.vMoments.x = 0.0f;
     Airplane.vMoments.y = 0.0f;
     Airplane.vMoments.z = 0.0f;

     // Zero the velocity in body space coordinates
     Airplane.vVelocityBody.x = 0.0f;
     Airplane.vVelocityBody.y = 0.0f;
     Airplane.vVelocityBody.z = 0.0f;

     // Set these to false at first,
     // you can control later using the keyboard
     Stalling = false;
     Flaps = false;

     // Set the initial orientation
     iRoll = 0.0f;
     iPitch = 0.0f;
     iYaw = 0.0f;
     Airplane.qOrientation = MakeQFromEulerAngles(iRoll, iPitch, iYaw);

     // Now go ahead and calculate the plane's mass properties
     CalcAirplaneMassProperties();
}
    
    
====================================
void     CalcAirplaneMassProperties(void)
{
     .
     .
     .

     // Now calculate the moments and products of inertia for the
     // combined elements.
     // (This inertia matrix (tensor) is in body coordinates)
     Ixx = 0;     Iyy = 0;     Izz = 0;
     Ixy = 0;     Ixz = 0;     Iyz = 0;
     for (i = 0; i< 8; i++)
     {
          Ixx += Element[i].vLocalInertia.x + Element[i].fMass *
                 (Element[i].vCGCoords.y*Element[i].vCGCoords.y +
                  Element[i].vCGCoords.z*Element[i].vCGCoords.z);
          Iyy += Element[i].vLocalInertia.y + Element[i].fMass *
                 (Element[i].vCGCoords.z*Element[i].vCGCoords.z +
                  Element[i].vCGCoords.x*Element[i].vCGCoords.x);
          Izz += Element[i].vLocalInertia.z + Element[i].fMass *
                 (Element[i].vCGCoords.x*Element[i].vCGCoords.x +
                  Element[i].vCGCoords.y*Element[i].vCGCoords.y);
          Ixy += Element[i].fMass * (Element[i].vCGCoords.x *
                 Element[i].vCGCoords.y);
          Ixz += Element[i].fMass * (Element[i].vCGCoords.x *
                 Element[i].vCGCoords.z);
          Iyz += Element[i].fMass * (Element[i].vCGCoords.y *
                 Element[i].vCGCoords.z);
     }

     // Finally set up the airplane's mass and its inertia matrix and take the
     // inverse of the inertia matrix
     Airplane.fMass = mass;
     Airplane.mInertia.e11 = Ixx;
     Airplane.mInertia.e12 = -Ixy;
     Airplane.mInertia.e13 = -Ixz;
     Airplane.mInertia.e21 = -Ixy;
     Airplane.mInertia.e22 = Iyy;
     Airplane.mInertia.e23 = -Iyz;
     Airplane.mInertia.e31 = -Ixz;
     Airplane.mInertia.e32 = -Iyz;
     Airplane.mInertia.e33 = Izz;

     Airplane.mInertiaInverse = Airplane.mInertia.Inverse();
}
    
    
====================================
void     CalcAirplaneLoads(void)
{
     .
     .
     .

     // Convert forces from model space to earth space
     Airplane.vForces = QVRotate(Airplane.qOrientation, Fb);

     // Apply gravity (g is defined as −32.174 ft/s^2)
     Airplane.vForces.z += g * Airplane.fMass;

     .
     .
     .
}
    
    
====================================
void     StepSimulation(float dt)
{
     // Take care of translation first:
     // (If this body were a particle, this is all you would need to do.)

          Vector Ae;

          // calculate all of the forces and moments on the airplane:
          CalcAirplaneLoads();

          // calculate the acceleration of the airplane in earth space:
          Ae = Airplane.vForces / Airplane.fMass;

          // calculate the velocity of the airplane in earth space:
          Airplane.vVelocity += Ae * dt;

          // calculate the position of the airplane in earth space:
          Airplane.vPosition += Airplane.vVelocity * dt;


     // Now handle the rotations:
          float  mag;

          // calculate the angular velocity of the airplane in body space:
          Airplane.vAngularVelocity += Airplane.mInertiaInverse *
                                       (Airplane.vMoments -
                                       (Airplane.vAngularVelocity^
                                       (Airplane.mInertia *
                                         Airplane.vAngularVelocity)))
                                        * dt;

          // calculate the new rotation quaternion:
          Airplane.qOrientation += (Airplane.qOrientation *
                                    Airplane.vAngularVelocity) *
                                   (0.5f * dt);

          // now normalize the orientation quaternion:
          mag = Airplane.qOrientation.Magnitude();
          if (mag != 0)
               Airplane.qOrientation /= mag;

          // calculate the velocity in body space:
          // (we'll need this to calculate lift and drag forces)
          Airplane.vVelocityBody = QVRotate(~Airplane.qOrientation,
                                            Airplane.vVelocity);

          // calculate the air speed:
          Airplane.fSpeed = Airplane.vVelocity.Magnitude();

          // get the Euler angles for our information
          Vector u;

          u = MakeEulerAnglesFromQ(Airplane.qOrientation);
          Airplane.vEulerAngles.x = u.x;     // roll
          Airplane.vEulerAngles.y = u.y;     // pitch
          Airplane.vEulerAngles.z = u.z;     // yaw

}
    
    
====================================
void     IncThrust(void)
{
     ThrustForce += _DTHRUST;
     if(ThrustForce > _MAXTHRUST)
          ThrustForce = _MAXTHRUST;
}

void     DecThrust(void)
{
     ThrustForce -= _DTHRUST;
     if(ThrustForce < 0)
          ThrustForce = 0;
}
    
    
====================================
#define    _DTHRUST      100.0f
#define    _MAXTHRUST    3000.0f
    
    
====================================
void     LeftRudder(void)
{
     Element[6].fIncidence = 16;
}

void     RightRudder(void)
{
     Element[6].fIncidence = −16;
}

void     ZeroRudder(void)
{
     Element[6].fIncidence = 0;
}
    
    
====================================
void     RollLeft(void)
{
     Element[0].iFlap = 1;
     Element[3].iFlap = −1;
}

void     RollRight(void)
{
     Element[0].iFlap = −1;
     Element[3].iFlap = 1;
}

void     ZeroAilerons(void)
{
     Element[0].iFlap = 0;
     Element[3].iFlap = 0;
}
    
    
====================================
void     PitchUp(void)
{
     Element[4].iFlap = 1;
     Element[5].iFlap = 1;
}

void     PitchDown(void)
{
     Element[4].iFlap = −1;
     Element[5].iFlap = −1;
}


void     ZeroElevators(void)
{
     Element[4].iFlap = 0;
     Element[5].iFlap = 0;
}
    
    
====================================
void     FlapsDown(void)
{
     Element[1].iFlap = −1;
     Element[2].iFlap = −1;
     Flaps = true;
}

void     ZeroFlaps(void)
{
     Element[1].iFlap = 0;
     Element[2].iFlap = 0;
     Flaps = false;
}
    
    
====================================
.
.
.

     ZeroRudder();
     ZeroAilerons();
     ZeroElevators();

     // pitch down
     if (IsKeyDown(VK_UP))
          PitchDown();

     // pitch up
     if (IsKeyDown(VK_DOWN))
          PitchUp();

     // roll left
     if (IsKeyDown(VK_LEFT))
          RollLeft();

     // roll right
     if (IsKeyDown(VK_RIGHT))
          RollRight();

     //  Increase thrust
     if (IsKeyDown(0x41)) // A
          IncThrust();

     //  Decrease thrust
     if (IsKeyDown(0x5A)) // Z
          DecThrust();

     // yaw left
     if (IsKeyDown(0x58)) // x
          LeftRudder();

     // yaw right
     if (IsKeyDown(0x43)) // c
          RightRudder();

     // landing flaps down
     if (IsKeyDown(0x46)) //f
          FlapsDown();

     // landing flaps up
     if (IsKeyDown(0x44)) // d
          ZeroFlaps();

     StepSimulation(dt);
.
.
.
    
    
====================================
BOOL IsKeyDown(short KeyCode)
{

    SHORT    retval;

    retval = GetAsyncKeyState(KeyCode);

    if (HIBYTE(retval))
        return TRUE;

    return FALSE;
}
    
    
==================